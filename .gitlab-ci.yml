stages:
  - test
  - build
  - deploy

test:
  image: golang:1.22.5-alpine
  stage: test
  coverage: '/total:\s+\(statements\)\s+(\d+.\d+\%)/'
  variables:
    min_coverage: '60'
    coverage_result: '/total:\s+\(statements\)\s+(\d+.\d+)\%/'
  script:
    - set -e
    - apk add --update --no-cache make
    - make setup_alpine && make setup && make generate && make test
    - make coverage && coverage_total=$(make coverage_total | tail -n1) && echo $coverage_total
    - 'echo "$coverage_total<$min_coverage" | bc | grep 0 || (echo "coverage below requirement: $min_coverage" && exit 1)'

lint:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: test
  script:
    - set -e
    - apk add --update --no-cache make
    - make setup_alpine && make setup && make generate
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
    - make lint
  artifacts:
    paths:
      - report.txt

build:
  image: golang:1.22.5-alpine
  stage: build
  script:
    - apk add --update --no-cache make
    - make setup_alpine && make setup && make generate
    - make build
  artifacts:
    paths:
      - csr
      
deploy_stage:
  image: kroniak/ssh-client
  environment:
    name: stage
  stage: deploy
  rules:
    - if: $START_DEPLOY_TO_STAGE == "true"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
  script:
    - set -e
    - apk add --update --no-cache make
    - make setup_alpine
    - mkdir -p ~/.ssh
    - echo "$deploy_ssh_private_key" > ~/.ssh/ssh_deploy
    - chmod -R 700 ~/.ssh
    - echo "$deploy_config" > ./config.json
    - env="$CI_ENVIRONMENT_NAME" make deploy_ssh

deploy_prod:
  image: kroniak/ssh-client
  environment:
    name: prod
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
  script:
    - set -e
    - apk add --update --no-cache make
    - make setup_alpine
    - mkdir -p ~/.ssh
    - echo "$deploy_ssh_private_key" > ~/.ssh/ssh_deploy
    - chmod -R 700 ~/.ssh
    - echo "$deploy_config" > ./config.json
    - env="$CI_ENVIRONMENT_NAME" make deploy_ssh
